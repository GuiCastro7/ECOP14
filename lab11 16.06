//Parte 3 - Mexer no ultimo display para aparecer a tecla pressionada.
#include "pic18f4520.h"
#include "config.h"
#include "ssd.h"
#include "timer.h"
#include "keypad.h"
#include "adc.h"
char flag;


void Int(void) __interrupt() {
    if (BitTst(INTCON, 2)) { //Verifica se ocorreu overflow de TMR0
        timerReset(5000); //Ajusta o contador do TMR0 para 1ms
        BitClr(INTCON, 2); //Desliga o Flag de everflow do TMR0
        flag = 1;
    }
     
}

void main(void) {
    float cont = 0;
    unsigned char tecla;
    
    ssdInit();
    kpInit();
    timerInit();
    BitClr(RCON, 7); //desabilita IPEN
    BitSet(INTCON, 7); //habilita GIE (Global Interrupt)
    BitSet(INTCON, 6); //habilita interrupção de periféricos
    BitSet(INTCON, 5); //int. timer0 (TMR0 Overflow)
    PORTD = 0;
    ADCON0 |= 0x02;
    for (;;) {
        ssdUpdate();
        kpDebounce();
        tecla = kpRead();
        if (tecla == 0x01) {
            ssdDigit(0x0A, 0);
        } else if (tecla == 0x02) {
            ssdDigit(0x0B, 0);
        } else if (tecla == 0x04) {
            ssdDigit(0x03, 0);
        } else if (tecla == 0x08) {
            ssdDigit(0x06, 0);
        } else if (tecla == 0x10) {
            ssdDigit(0x02, 0);
        } else if (tecla == 0x20) {
            ssdDigit(0x05, 0);
        } else if (tecla == 0x40) {
            ssdDigit(0x01, 0);
        } else if (tecla == 0x80) {
            ssdDigit(0x04, 0);
        }
        
        while (!flag);
        flag = 0;

    }

}



//Parte 4 - Pegar a Parte 3 e adcionar nos display restantes para aparecer a temperatura apresentada.  
#include "pic18f4520.h"
#include "config.h"
#include "ssd.h"
#include "timer.h"
#include "keypad.h"
#include "adc.h"
char flag;
unsigned int ADvalor;

void Int(void) __interrupt() {
    if (BitTst(INTCON, 2)) { //Verifica se ocorreu overflow de TMR0
        timerReset(5000); //Ajusta o contador do TMR0 para 1ms
        BitClr(INTCON, 2); //Desliga o Flag de everflow do TMR0
        flag = 1;
    }
    if (BitTst(PIR1, 6)) { //Rotina para interrupção (fim de conversão AD) //Adiciona isso para a rotina com o ADValor
        ADvalor = ADRESH;
        ADvalor <<= 8;
        ADvalor += ADRESL;
        BitClr(PIR1, 6); //limpa a flag
    }
}

void main(void) {
    float cont = 0;
    unsigned char tecla;
    
    ssdInit();
    kpInit();
    timerInit();
    adcInit();
    BitClr(RCON, 7); //desabilita IPEN
    BitSet(INTCON, 7); //habilita GIE (Global Interrupt)
    BitSet(INTCON, 6); //habilita interrupção de periféricos
    BitSet(INTCON, 5); //int. timer0 (TMR0 Overflow)
    PORTD = 0;
    ADCON0 |= 0x02;
    for (;;) {
        ssdUpdate();
        kpDebounce();
        tecla = kpRead();
        if (tecla == 0x01) {
            ssdDigit(0x0A, 0);
        } else if (tecla == 0x02) {
            ssdDigit(0x0B, 0);
        } else if (tecla == 0x04) {
            ssdDigit(0x03, 0);
        } else if (tecla == 0x08) {
            ssdDigit(0x06, 0);
        } else if (tecla == 0x10) {
            ssdDigit(0x02, 0);
        } else if (tecla == 0x20) {
            ssdDigit(0x05, 0);
        } else if (tecla == 0x40) {
            ssdDigit(0x01, 0);
        } else if (tecla == 0x80) {
            ssdDigit(0x04, 0);
        }
        
        ssdDigit((ADvalor/2) % 10, 1);
        ssdDigit((ADvalor/20) % 10, 2);
        ssdDigit((ADvalor/200) % 10, 3);
        
        while (!flag);
        flag = 0;

    }

}


